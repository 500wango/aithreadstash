(function() {
    'use strict';

    if (window.deepSeekCleanLoaded) {
        return;
    }
    window.deepSeekCleanLoaded = true;

    // 添加导出按钮到页面
    function addExportButton() {
        if (document.getElementById('deepseek-export-btn')) {
            return;
        }

        const button = document.createElement('button');
        button.id = 'deepseek-export-btn';
        button.textContent = '导出对话';
        button.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            padding: 10px 15px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        `;

        button.addEventListener('click', () => {
            const conversation = parseDeepSeekConversationClean();
            if (conversation) {
                downloadConversation(conversation);
            }
        });

        document.body.appendChild(button);
    }

    function isNoise(element) {
        const text = (element.textContent || '').trim();
        const className = element.className || '';
        
        // Rule 1: 聊天输入框和相关UI
        if (element.matches('textarea, input, button, [contenteditable="true"]')) {
            return true;
        }
        
        // 检查是否包含聊天输入框相关的CSS类名
        const inputClasses = [
            'chat-input', 'message-input', 'input-box', 'textarea',
            'composer', 'prompt-textarea', 'chat-composer', 'input-container',
            'chat-box', 'message-box', 'prompt-box', 'text-input'
        ];
        if (inputClasses.some(inputClass => element.className && element.className.toLowerCase().includes(inputClass.toLowerCase()))) {
            return true;
        }
        
        // 检查是否包含聊天输入框的placeholder文本
        const inputPlaceholders = [
            'Message DeepSeek', '输入消息', '请输入', 'Type a message',
            'Ask me anything', '问我任何问题', 'Enter your message',
            'deepseek', 'message', 'chat', '对话', '聊天'
        ];
        if (inputPlaceholders.some(placeholder => text.toLowerCase().includes(placeholder.toLowerCase()))) {
            return true;
        }
        
        // 检查元素的role属性和data属性
        const role = element.getAttribute('role');
        if (role && ['textbox', 'combobox', 'searchbox'].includes(role.toLowerCase())) {
            return true;
        }
        
        // 检查data属性
        const dataAttrs = element.getAttributeNames().filter(name => name.startsWith('data-'));
        if (dataAttrs.some(attr => {
            const value = element.getAttribute(attr).toLowerCase();
            return value.includes('input') || value.includes('chat') || value.includes('message') || value.includes('prompt');
        })) {
            return true;
        }
        
        // 检查是否是输入框的父容器
        if (element.querySelector('textarea, input, [contenteditable="true"]')) {
            return true;
        }
        
        // Rule 2: 常见的UI文本和提示信息
        const uiTexts = [
            '发送', 'Send', '清空', 'Clear', '复制', 'Copy', '编辑', 'Edit',
            '重新生成', 'Regenerate', '点赞', 'Like', '点踩', 'Dislike',
            '分享', 'Share', '保存', 'Save', '删除', 'Delete',
            'AI-generated, for reference only', 'AI生成，仅供参考',
            '仅供参考', 'for reference only', 'AI generated', 'AI-generated',
            '人工智能生成', '机器生成', 'Generated by AI'
        ];
        if (uiTexts.some(uiText => text === uiText)) {
            return true;
        }
        
        // Rule 3: 移除思考过程检测，这应该由containsThinkingProcess函数处理
        // isNoise函数只负责过滤明确的UI元素，不应该过滤内容
        
        // Rule 4: 移除图标后剩余文本很少的元素
        if (text.length < 10 && element.querySelectorAll('svg, img, [class*="icon"]').length > 0) {
            return true;
        }
        
        // Rule 5: 主要由图标组成的元素
        if (element.querySelectorAll('svg, img').length > 0 && text.length < 5) {
            return true;
        }
        
        // Rule 6: 空或不可见元素
        if (!text || text.length === 0) {
            return true;
        }
        
        return false;
    }

    function parseDeepSeekConversationClean() {
        // DeepSeek Conversation Parser Started
        const title = getCleanTitle();
        const turns = [];
        const processedElements = new WeakSet();

        // 尝试多种方式找到聊天容器
        let chatContainer = null;
        
        // 方法1: 查找包含scrollable的div
        const scrollableContainers = Array.from(document.querySelectorAll('div[class*="scrollable"]'))
            .filter(el => el.getBoundingClientRect().left > 10);
        if (scrollableContainers.length > 0) {
            chatContainer = scrollableContainers[0];
        }
        
        // 方法2: 查找包含对话内容的主要容器
        if (!chatContainer) {
            const alternatives = [
                'main[class*="chat"]',
                'div[class*="chat-container"]',
                'div[class*="conversation"]',
                'div[class*="messages"]',
                '[role="main"]',
                'main'
            ];
            
            for (const selector of alternatives) {
                const containers = document.querySelectorAll(selector);
                for (const container of containers) {
                    if (container.querySelector('.ds-markdown--block') || 
                        container.querySelector('[class*="markdown"]') ||
                        container.textContent.length > 100) {
                        chatContainer = container;
                        break;
                    }
                }
                if (chatContainer) break;
            }
        }
        
        // 方法3: 如果还是找不到，使用整个body作为容器
        if (!chatContainer) {
            chatContainer = document.body;
        }
        
        if (!chatContainer) {
            // Could not find chat container
            return { error: 'Chat container not found', turns: [], title };
        }

        // Pass 1: 识别助手消息
        let assistantBlocks = chatContainer.querySelectorAll('.ds-markdown--block');
        
        // 如果没有找到标准选择器，尝试备用方案
        if (assistantBlocks.length === 0) {
            const alternatives = [
                '[class*="markdown"]',
                '[class*="message"][class*="assistant"]',
                '[class*="response"]',
                '[class*="ai-message"]',
                '[class*="bot-message"]',
                '[class*="assistant-message"]',
                'div[data-role="assistant"]',
                'div[role="assistant"]',
                '.message.assistant',
                '.assistant-response',
                '.ai-response'
            ];
            
            for (const selector of alternatives) {
                const elements = chatContainer.querySelectorAll(selector);
                if (elements.length > 0) {
                    assistantBlocks = elements;
                    break;
                }
            }
        }
        
        // 如果仍然没有找到，尝试通过内容特征识别
        if (assistantBlocks.length === 0) {
            const allDivs = Array.from(chatContainer.querySelectorAll('div'));
            const potentialAssistantBlocks = allDivs.filter(div => {
                const text = div.textContent?.trim() || '';
                // 降低文本长度要求，查找包含文本且不是明确的UI元素
                return text.length > 20 && 
                       !isNoise(div) && 
                       !div.matches('textarea, input, button, [contenteditable="true"]') &&
                       // 不包含明显的用户输入特征
                       !text.toLowerCase().includes('message deepseek') &&
                       !text.toLowerCase().includes('输入消息') &&
                       !text.toLowerCase().includes('ask me anything');
            });
            
            if (potentialAssistantBlocks.length > 0) {
                assistantBlocks = potentialAssistantBlocks;
            }
        }
        
        assistantBlocks.forEach(block => {
            const elementForProcessing = block.parentElement?.closest('div[class]') || block;
            if (processedElements.has(elementForProcessing)) return;

            const blockText = (block.textContent || '').trim();
            
            // 只有当内容明确是思考过程且较短时才跳过
            if (containsThinkingProcess(blockText) && blockText.length < 200) {
                // Skipping thinking process content
                processedElements.add(elementForProcessing);
                elementForProcessing.querySelectorAll('*').forEach(child => processedElements.add(child));
                return;
            }

            const content = extractCleanContent(block);
            if (content && content.text && content.text.length > 5) {
                turns.push({ role: 'assistant', content, element: elementForProcessing });
                processedElements.add(elementForProcessing);
                elementForProcessing.querySelectorAll('*').forEach(child => processedElements.add(child));
            }
        });

        // Pass 2: 识别用户消息
        const allDivs = Array.from(chatContainer.querySelectorAll('div'));
        
        // 首先尝试通过特定选择器查找用户消息
        const userSelectors = [
            '[class*="user-message"]',
            '[class*="human-message"]',
            '[data-role="user"]',
            '[role="user"]',
            '.message.user',
            '.user-input',
            '.human-input'
        ];
        
        for (const selector of userSelectors) {
            const userElements = chatContainer.querySelectorAll(selector);
            userElements.forEach(element => {
                if (processedElements.has(element)) return;
                const content = extractCleanContent(element);
                if (content && content.text && content.text.length > 5) {
                    turns.push({ role: 'user', content, element });
                    processedElements.add(element);
                    element.querySelectorAll('*').forEach(child => processedElements.add(child));
                }
            });
        }
        
        // 然后处理剩余的div元素
        allDivs.forEach(div => {
            if (processedElements.has(div) || div.querySelector('.ds-markdown--block')) return;
            if (isNoise(div)) return;
            if (containsThinkingProcess(div.textContent)) {
                processedElements.add(div);
                div.querySelectorAll('*').forEach(child => processedElements.add(child));
                return;
            }
            
            const content = extractCleanContent(div);
            if (content && content.text && content.text.length > 5) {
                turns.push({ role: 'user', content, element: div });
                processedElements.add(div);
                div.querySelectorAll('*').forEach(child => processedElements.add(child));
            }
        });

        // 按DOM位置排序
        turns.sort((a, b) => {
            const position = a.element.compareDocumentPosition(b.element);
            if (position & Node.DOCUMENT_POSITION_FOLLOWING) return -1;
            if (position & Node.DOCUMENT_POSITION_PRECEDING) return 1;
            return 0;
        });

        const finalTurns = turns.map(turn => ({
            role: turn.role,
            content: turn.content,
            timestamp: new Date().toISOString()
        }));

        // Parsing Complete
        
        if (finalTurns.length === 0) {
            // 添加调试信息
            const debugInfo = {
                chatContainerFound: !!chatContainer,
                chatContainerSelector: chatContainer ? chatContainer.tagName + (chatContainer.className ? '.' + chatContainer.className.split(' ').join('.') : '') : 'none',
                assistantBlocksCount: assistantBlocks ? assistantBlocks.length : 0,
                totalDivsInContainer: chatContainer ? chatContainer.querySelectorAll('div').length : 0,
                bodyTextLength: document.body.textContent?.length || 0,
                containerTextLength: chatContainer ? chatContainer.textContent?.length || 0 : 0
            };
            
            console.log('DeepSeek Parser Debug Info:', debugInfo);
            
            // No conversation turns found - this may cause parsing errors
            return { 
                error: 'No conversation content found', 
                turns: [], 
                title, 
                url: window.location.href, 
                exportedAt: new Date().toISOString(),
                debugInfo 
            };
        }
        return {
            title: title,
            url: window.location.href,
            exportedAt: new Date().toISOString(),
            turns: finalTurns
        };
    }

    function containsThinkingProcess(text) {
        // 只保留非常明确的思考过程标识，避免误判正常内容
        const thinkingIndicators = [
            '正在思考', '思考中', '搜索中', '计算中', '生成中',
            '已搜索到', '已深度思考', '互联网搜索', '深度思考', '联网搜索',
            '思考已停止', '停止思考', '思考完成', '思考结束', '思考暂停',
            '模型思考', '思考过程',
            'thinking stopped', 'Thinking stopped', 'thinking complete', 'thinking finished',
            '让我想想', '让我分析', '让我思考', '我来分析',
            '思考：', '分析：', '推理：', '处理：',
            '正在搜索', '搜索完成', '网络搜索', 'web search',
            '搜索结果', '搜索到', '查找中', '查询中', '检索中',
            '联网中', '连接网络', '获取信息', '网络查询'
        ];
        
        // 特殊处理：检查是否包含"Found X results"格式
        if (/Found \d+ results/.test(text)) {
            return true;
        }
        
        // 更严格的匹配：只有当文本很短且主要包含思考标识时才认为是思考过程
        const hasThinkingIndicator = thinkingIndicators.some(indicator => 
            text.toLowerCase().includes(indicator.toLowerCase())
        );
        
        if (!hasThinkingIndicator) {
            return false;
        }
        
        // 如果文本很长（超过100字符），可能是包含思考词汇的正常回答
        if (text.length > 100) {
            // 检查是否主要由思考标识组成（思考标识占比超过30%）
            const thinkingWords = thinkingIndicators.filter(indicator => 
                text.toLowerCase().includes(indicator.toLowerCase())
            );
            const thinkingLength = thinkingWords.reduce((sum, word) => sum + word.length, 0);
            return thinkingLength / text.length > 0.3;
        }
        
        return hasThinkingIndicator;
    }

    function extractCleanContent(element) {
        const clone = element.cloneNode(true);

        // 移除按钮、SVG、图片和其他不需要的元素
        const elementsToRemove = clone.querySelectorAll('button, svg, img, .copy, .edit, .icon, [class*="icon"], [class*="button"]');
        elementsToRemove.forEach(el => el.remove());

        const text = clone.textContent.trim();
        const html = clone.innerHTML;

        return {
            text: text,
            html: html
        };
    }

    function downloadConversation(conversation) {
        const jsonStr = JSON.stringify(conversation, null, 2);
        const blob = new Blob([jsonStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `deepseek-conversation-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    function getCleanTitle() {
        const titleElement = document.querySelector('title');
        if (titleElement) {
            return titleElement.textContent.trim();
        }
        return 'DeepSeek Conversation';
    }

    // 监听来自popup的消息
    if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.onMessage) {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            if (request.action === 'export') {
                // Export request received
                
                try {
                    const conversation = parseDeepSeekConversationClean();
                    // Parse result obtained
                    
                    if (conversation && !conversation.error) {
                        // Sending conversation data to background for storage
                        
                        // 通过background script存储数据
                        chrome.runtime.sendMessage({
                            action: 'storeConversationData',
                            data: conversation,
                            url: window.location.href
                        }, (response) => {
                            if (chrome.runtime.lastError) {
                    // Background communication error
                    sendResponse({success: false, error: '通信失败: ' + chrome.runtime.lastError.message});
                } else if (response && response.success) {
                    // Data stored successfully
                                sendResponse({success: true, key: response.key});
                            } else {
                        const errorMsg = response ? response.error : '存储失败';
                        // Storage failed
                        sendResponse({success: false, error: errorMsg});
                    }
                        });
                        
                        return true; // 表示异步响应
                    } else {
                        const errorMsg = conversation?.error || '无法解析对话内容';
                        // Parse failed
                        sendResponse({success: false, error: errorMsg});
                        return false; // 同步响应
                    }
                } catch (error) {
                    // Export error
                    sendResponse({success: false, error: '导出过程中发生错误: ' + error.message});
                    return false; // 同步响应
                }
            }
            return false; // 不处理的消息
        });
    } else {
        // Chrome extension environment not detected - export functionality disabled
        // 在非扩展环境中，导出功能不可用
    }

    // 注入样式以修改代码块背景
    function injectStyles() {
        const style = document.createElement('style');
        style.textContent = `
            pre[class*="language-"] {
                background: #000000 !important;
                white-space: pre-wrap !important;
                word-wrap: break-word !important;
                word-break: break-all !important;
                overflow-wrap: break-word !important;
                padding: 1em;
                overflow: auto;
                border-radius: 0.3em;
            }
            code[class*="language-"] {
                background: transparent !important;
                white-space: pre-wrap !important;
                word-wrap: break-word !important;
                word-break: break-all !important;
                overflow-wrap: break-word !important;
                display: block;
            }
        `;
        document.head.appendChild(style);
    }

    // 页面加载完成后添加按钮和注入样式
    function init() {
        addExportButton();
        injectStyles();
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

    // 监听页面变化，确保按钮始终存在
    const observer = new MutationObserver(() => {
        if (!document.getElementById('deepseek-export-btn')) {
            addExportButton();
        }
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
})();