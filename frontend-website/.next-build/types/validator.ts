// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\src\app\auth\error\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\auth\\error\\page.js")
  handler satisfies AppPageConfig<"/auth/error">
}

// Validate ..\..\src\app\auth\success\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\auth\\success\\page.js")
  handler satisfies AppPageConfig<"/auth/success">
}

// Validate ..\..\src\app\billing\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\billing\\page.js")
  handler satisfies AppPageConfig<"/billing">
}

// Validate ..\..\src\app\contact\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\contact\\page.js")
  handler satisfies AppPageConfig<"/contact">
}

// Validate ..\..\src\app\conversations\[id]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\conversations\\[id]\\page.js")
  handler satisfies AppPageConfig<"/conversations/[id]">
}

// Validate ..\..\src\app\conversations\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\conversations\\page.js")
  handler satisfies AppPageConfig<"/conversations">
}

// Validate ..\..\src\app\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ..\..\src\app\export\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\export\\page.js")
  handler satisfies AppPageConfig<"/export">
}

// Validate ..\..\src\app\faq\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\faq\\page.js")
  handler satisfies AppPageConfig<"/faq">
}

// Validate ..\..\src\app\features\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\features\\page.js")
  handler satisfies AppPageConfig<"/features">
}

// Validate ..\..\src\app\help\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\help\\page.js")
  handler satisfies AppPageConfig<"/help">
}

// Validate ..\..\src\app\login\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\login\\page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\pricing\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\pricing\\page.js")
  handler satisfies AppPageConfig<"/pricing">
}

// Validate ..\..\src\app\privacy\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\privacy\\page.js")
  handler satisfies AppPageConfig<"/privacy">
}

// Validate ..\..\src\app\register\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\register\\page.js")
  handler satisfies AppPageConfig<"/register">
}

// Validate ..\..\src\app\settings\google-drive\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\settings\\google-drive\\page.js")
  handler satisfies AppPageConfig<"/settings/google-drive">
}

// Validate ..\..\src\app\settings\notion\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\settings\\notion\\page.js")
  handler satisfies AppPageConfig<"/settings/notion">
}

// Validate ..\..\src\app\settings\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\settings\\page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ..\..\src\app\terms\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\terms\\page.js")
  handler satisfies AppPageConfig<"/terms">
}

// Validate ..\..\src\app\api\waitlist\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\waitlist\\route.js")
  handler satisfies RouteHandlerConfig<"/api/waitlist">
}





// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ..\..\src\app\privacy\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\privacy\\layout.js")
  handler satisfies LayoutConfig<"/privacy">
}

// Validate ..\..\src\app\terms\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\terms\\layout.js")
  handler satisfies LayoutConfig<"/terms">
}
